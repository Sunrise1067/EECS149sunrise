/**
 * Display the outputs from the line sensors on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>. This program spends the
 * first 10 seconds in calibration mode, during which you should move the robot over the light and
 * dark areas that you would like it to detect. It then switches into measurement mode and displays
 * the measured reflectance of the five IR sensors.
 *
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
  }

  import Line from "lib/Line.lf"
  import Display from "lib/Display.lf"
  import Motors from "lib/Motors.lf"
  import tilt from "lib/tilt.lf"
  import Accelerometer from "lib/IMU.lf"
  

  reactor Robot {
    input state_R: int
    input line_R: uint16_t[5] 
    output notify: string
    Motor = new Motors()
    tilt_1 = new tilt()
    acceleration = new Accelerometer()
    timer t_R(10s, 100ms)
    state down:bool = false


    reaction(t_R)-> acceleration.trigger
    {=
      lf_set(acceleration.trigger, true);
    =}

    acceleration.x -> tilt_1.x
    acceleration.y -> tilt_1.y
    acceleration.z -> tilt_1.z



  initial mode DRIVING{
    reaction(line_R,tilt_1.pitch, tilt_1.roll) -> reset(TURNLEFT), reset(TURNRIGHT), reset(BACK), reset(DOWN),notify, Motor.left_power, Motor.right_power {=
    lf_set(Motor.left_power,0.2f);
    lf_set(Motor.right_power,0.19f);
    if(tilt_1.pitch->value <= 2 && tilt_1.roll->value <= 2)
    {
      lf_set_mode(DOWN);
      lf_set(notify, "DOWN");
    }
    if(line_R->value[4] >=800 && line_R->value[0] <=200)
    {
        lf_set(Motor.left_power,-0.1f);
        lf_set(Motor.right_power,0.13f);
        lf_set_mode(TURNLEFT);
        lf_set(notify, "TURNLEFT");
    }
    else if(line_R->value[2] >=800 && line_R->value[3] >=800)
    {
        lf_set(Motor.left_power,-0.1f);
        lf_set(Motor.right_power,0.13f);
        lf_set_mode(TURNLEFT);
        lf_set(notify, "TURNLEFT");
    }
    
    else if(line_R->value[0] >=800 && line_R->value[4] <=200)
    {
        lf_set(Motor.left_power,0.13f);
        lf_set(Motor.right_power,-0.1f);
        lf_set_mode(TURNRIGHT);
        lf_set(notify, "TURNRIGHT");
    }
    else if(line_R->value[1] >=800 && line_R->value[2] >=800)
    {
        lf_set(Motor.left_power,0.13f);
        lf_set(Motor.right_power,-0.1f);
        lf_set_mode(TURNRIGHT);
        lf_set(notify, "TURNRIGHT");
    }

    if(line_R->value[0] >= 800 && line_R->value[1] >= 800 && line_R->value[2] >= 800 && line_R->value[3] >= 800 && line_R->value[4] >= 800)
    {
        lf_set_mode(BACK);
        lf_set(notify, "BACK");
        lf_set(Motor.left_power,-0.1f);
        lf_set(Motor.right_power,-0.09f);
    }
    =}
  }

  mode DOWN{
    reaction(line_R,tilt_1.pitch, tilt_1.roll) -> reset(DRIVING),reset(TURNLEFT), reset(TURNRIGHT), reset(BACK), notify, Motor.left_power, Motor.right_power {=
    lf_set(Motor.left_power,0.1f);
    lf_set(Motor.right_power,0.09f);
    self->down = true;
    if(line_R->value[4] >=800 && line_R->value[0] <=200)
    {
        lf_set(Motor.left_power,-0.13f);
        lf_set(Motor.right_power,0.1f);
        lf_set_mode(TURNLEFT);
        lf_set(notify, "TURNLEFT");
    }
    else if(line_R->value[2] >=800 && line_R->value[3] >=800)
    {
        lf_set(Motor.left_power,-0.13f);
        lf_set(Motor.right_power,0.1f);
        lf_set_mode(TURNLEFT);
        lf_set(notify, "TURNLEFT");
    }
    
    else if(line_R->value[0] >=800 && line_R->value[4] <=200)
    {
        lf_set(Motor.left_power,0.1f);
        lf_set(Motor.right_power,-0.13f);
        lf_set_mode(TURNRIGHT);
        lf_set(notify, "TURNRIGHT");
    }
    else if(line_R->value[1] >=800 && line_R->value[2] >=800)
    {
        lf_set(Motor.left_power,0.1f);
        lf_set(Motor.right_power,-0.13f);
        lf_set_mode(TURNRIGHT);
        lf_set(notify, "TURNRIGHT");
    }

    if(line_R->value[0] >= 800 && line_R->value[1] >= 800 && line_R->value[2] >= 800 && line_R->value[3] >= 800 && line_R->value[4] >= 800)
    {
        lf_set_mode(BACK);
        lf_set(notify, "BACK");
        lf_set(Motor.left_power,-0.15f);
        lf_set(Motor.right_power,-0.14f);
    }
    =}

  }


  mode TURNLEFT  {
    reaction(line_R)-> reset(DRIVING), reset(TURNRIGHT), reset(BACK), reset(DOWN), notify, Motor.left_power, Motor.right_power {=
      
      if (line_R->value[0] <= 200 && line_R->value[1] <= 200 && line_R->value[2] <= 200 && line_R->value[3] <= 200 && line_R->value[4] <= 200) {
        if(self->down)
        {
          self->down = false;
          lf_set_mode(DOWN);
          lf_set(notify, "DOWN");
        }
        else
        {
          lf_set_mode(DRIVING);
          lf_set(notify, "DRIVING");
        }
      }

      if(line_R->value[0] >= 800 && line_R->value[1] >= 800 && line_R->value[2] >= 800 && line_R->value[3] >= 800 && line_R->value[4] >= 800)
    {
        lf_set_mode(BACK);
        lf_set(notify, "BACK");
    }
      =}
    }

  mode TURNRIGHT{
        reaction(line_R)-> reset(DRIVING), reset(TURNLEFT), reset(BACK), reset(DOWN), notify, Motor.left_power, Motor.right_power {=
      if (line_R->value[0] <= 200 && line_R->value[1] <= 200 && line_R->value[2] <= 200 && line_R->value[3] <= 200 && line_R->value[4] <= 200) {
        if(self->down)
        {
          self->down = false;
          lf_set_mode(DOWN);
          lf_set(notify, "DOWN");
        }
        else
        {
          lf_set_mode(DRIVING);
          lf_set(notify, "DRIVING");
        }
      }

      if(line_R->value[0] >= 800 && line_R->value[1] >= 800 && line_R->value[2] >= 800 && line_R->value[3] >= 800 && line_R->value[4] >= 800)
    {
        lf_set_mode(BACK);
        lf_set(notify, "BACK");
    }
        =}
    }
    
  mode BACK{
        reaction(line_R,tilt_1.pitch, tilt_1.roll)-> reset(TURNLEFT), reset(DRIVING), reset(TURNRIGHT), reset(DOWN), notify, Motor.left_power, Motor.right_power {=
        if(line_R->value[4] <= 200 && line_R->value[0] <= 200)
        {
            if(self->down)
          {
            if(tilt_1.roll->value < 0)
            {
              lf_set_mode(TURNLEFT);
              lf_set(notify, "TURNLEFT");
            }
            else
            {
              lf_set_mode(TURNRIGHT);
              lf_set(notify, "TURNRIGHT");
            }
          }
          else
          {
              if(tilt_1.roll->value < 0)
            {
              lf_set_mode(TURNRIGHT);
              lf_set(notify, "TURNRIGHT");
            }
            else
            {
              lf_set_mode(TURNLEFT);
              lf_set(notify, "TURNLEFT");
            }
          }
        }

      =}
    }
}
    


  

  
  main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
    line = new Line()
    disp = new Display()
    robot = new Robot()
  
    timer t(0, sample_period)
    timer seconds(0, 1 s)  // Timer used to display seconds.
    timer end_calibration(calibration_time)
    state count: int = 0
    state black: int = 800
    state white: int = 200

    reaction(startup) ->  disp.line1, disp.line2 {=
    //   lf_set(disp.line0, "CALIBRATING");
      lf_set(disp.line1, "Roll robot over");
      lf_set(disp.line2, "light and dark.");
    =}
  
    reaction(seconds) -> disp.line3 {=
      static char buf[17];
      snprintf(buf, 17, "time:%8d s", self->count++);
      lf_set(disp.line3, buf);
    =}
  
    reaction(end_calibration) -> line.calibrate {=
      lf_set(line.calibrate, false);
    =}
  
    reaction(t) -> line.trigger {=
      lf_set(line.trigger, true);
    =}

    line.reflect -> robot.line_R;
    
    robot.notify -> disp.line0

    reaction(line.reflect) -> disp.line1, disp.line2, disp.line3 {=
    
    static char buf0[17];
    static char buf1[17];
    static char buf2[17];
    snprintf(buf0, 17, "0:%4d 1:%4d", line.reflect->value[0], line.reflect->value[1]);
    snprintf(buf1, 17, "2:%4d 3:%4d", line.reflect->value[2], line.reflect->value[3]);
    snprintf(buf2, 17, "4:%4d", line.reflect->value[4]);
    lf_set(disp.line1, buf0);
    lf_set(disp.line2, buf1);
    lf_set(disp.line3, buf2);
    =}
    
  
//     reaction(line.reflect) -> disp.line0, disp.line1, disp.line2 {=
//       static char buf0[17];
//       static char buf1[17];
//       static char buf2[17];

//       if(line.reflect->value[0] >= self->black || line.reflect->value[1] >= self->black)
//       {
//         snprintf(buf0, 17, "Left");
//       }
//       else{
//         snprintf(buf0, 17, " ");
//       }
//       if(line.reflect->value[3] >= self->black || line.reflect->value[4] >= self->black)
//       {
//         snprintf(buf1, 17, "Right");
//       }
//       else{
//         snprintf(buf1, 17, " ");
//       }
//       if(line.reflect->value[1] >= self->black || line.reflect->value[2] >= self->black || line.reflect->value[3] >= self->black)
//       {
//         snprintf(buf2, 17, "Center");
//       }
//       else{
//         snprintf(buf2, 17, " ");
//       }

//     //   snprintf(buf0, 17, "Left");
//     //   snprintf(buf1, 17, "Right");
//     //   snprintf(buf2, 17, "Center");
//       lf_set(disp.line0, buf0);
//       lf_set(disp.line1, buf1);
//       lf_set(disp.line2, buf2);
//     =}
   }
  