/**
 * Display the outputs from the line sensors on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>. This program spends the
 * first 10 seconds in calibration mode, during which you should move the robot over the light and
 * dark areas that you would like it to detect. It then switches into measurement mode and displays
 * the measured reflectance of the five IR sensors.
 *
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
  }

  import Display from "lib/Display.lf"
  import MotorsWithFeedback from "lib/MotorsWithFeedback.lf"
  import tilt from "lib/tilt.lf"
  import Accelerometer from "lib/IMU.lf"
  import Gyro from "lib/IMU.lf"
  import Encoders from "lib/Encoders.lf"
  

  reactor Robot {
    input state_R: int
    input line_R: uint16_t[5] 
    output notify: string
    motor = new MotorsWithFeedback()
    tilt_1 = new tilt()
    acceleration = new Accelerometer()
    encoder = new Encoders()
    gyro = new Gyro()
    timer t_R(0, 100ms)


    reaction(t_R)-> acceleration.trigger
    {=
      lf_set(acceleration.trigger, true);
    =}

    acceleration.x -> tilt_1.x
    acceleration.y -> tilt_1.y
    acceleration.z -> tilt_1.z



  initial mode CALIBRATING
  {
    
  }

  mode UP{
    reation(encoder.left,encoder.right)-> motor.left_speed, motor.right_speed, motor.left, motor.right{=
        
    =}
  }
}
    


  

  
  main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
    disp = new Display()
    robot = new Robot()
  
    timer t(0, sample_period)
    timer seconds(0, 1 s)  // Timer used to display seconds.
    timer end_calibration(calibration_time)
    state count: int = 0
    state black: int = 800
    state white: int = 200

    reaction(startup) ->  disp.line1, disp.line2 {=
    //   lf_set(disp.line0, "CALIBRATING");
      lf_set(disp.line1, "Roll robot over");
      lf_set(disp.line2, "light and dark.");
    =}
  
    reaction(seconds) -> disp.line3 {=
      static char buf[17];
      snprintf(buf, 17, "time:%8d s", self->count++);
      lf_set(disp.line3, buf);
    =}
  
    reaction(end_calibration) -> line.calibrate {=
      lf_set(line.calibrate, false);
    =}
  
    reaction(t) -> line.trigger {=
      lf_set(line.trigger, true);
    =}

    line.reflect -> robot.line_R;
    
    robot.notify -> disp.line0

    reaction(line.reflect) -> disp.line1, disp.line2, disp.line3 {=
    
    static char buf0[17];
    static char buf1[17];
    static char buf2[17];
    snprintf(buf0, 17, "0:%4d 1:%4d", line.reflect->value[0], line.reflect->value[1]);
    snprintf(buf1, 17, "2:%4d 3:%4d", line.reflect->value[2], line.reflect->value[3]);
    snprintf(buf2, 17, "4:%4d", line.reflect->value[4]);
    lf_set(disp.line1, buf0);
    lf_set(disp.line2, buf1);
    lf_set(disp.line3, buf2);
    =}
    
   }
  