/**
 * Display encoder measurements from the wheels of the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  single-threaded: true
}

import Display from "lib/Display.lf"
import Encoders from "lib/Encoders.lf"

reactor AngleToDistance {
  input angle: int32_t
  output distance: float
  state previous_angle :int32_t = 0
  state distance_traveled: float = 0.0
  

  reaction(angle) -> distance {=  
  int32_t current_angle = angle->value;
  int32_t delta_angle = current_angle - self->previous_angle;
  self->previous_angle = current_angle;
  float distance_change = delta_angle * (3.175 * 3.1415926)/(360);
  self->distance_traveled += distance_change;
  lf_set(distance, self->distance_traveled);

  
  =}
}


main reactor {
  display = new Display()
  encoder = new Encoders()
  left_distance = new AngleToDistance()
  right_distance = new AngleToDistance()

  timer t(0, 100ms)

  reaction(t) -> encoder.trigger {= 
  lf_set(encoder.trigger, true); 
  
  =}

  reaction(startup) -> display.line0 {= 
  
  lf_set(display.line0, "Distances:"); 
  =}

  encoder.left -> left_distance.angle
  encoder.right -> right_distance.angle

  reaction(left_distance.distance) -> display.line1 {=
    static char buf[17];
    snprintf(buf, 17, "L: %f", left_distance.distance->value);
    lf_set(display.line1, buf);
  =}

  reaction(right_distance.distance) -> display.line2 {=
    static char buf[17];
    snprintf(buf, 17, "R: %f", right_distance.distance->value);
    lf_set(display.line2, buf);
  =}
}


// main reactor {
// display = new Display()
// encoder = new Encoders()
// timer t(0, 1 s)
// reaction(t) -> encoder.trigger {=
// lf_set(encoder.trigger, true);
//   =}
// reaction(startup) -> display.line0 {=
// lf_set(display.line0, "ENCODERS:");
//   =}
// reaction(encoder.left) -> display.line1 {=
// static char buf[17];
// snprintf(buf, 17, "L: %d", encoder.left->value);
// lf_set(display.line1, buf);
//   =}
// reaction(encoder.right) -> display.line2 {=
// static char buf[17];
// snprintf(buf, 17, "R: %d", encoder.right->value);
// lf_set(display.line2, buf);
//   =}
// }