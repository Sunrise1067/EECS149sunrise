/**
 * Display the outputs from the line sensors on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>. This program spends the
 * first 10 seconds in calibration mode, during which you should move the robot over the light and
 * dark areas that you would like it to detect. It then switches into measurement mode and displays
 * the measured reflectance of the five IR sensors.
 *
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
  }
  
  
  import Line from "lib/Line.lf"
  import Display from "lib/Display.lf"
  
  main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
    line = new Line()
    disp = new Display()
  
    timer t(0, sample_period)
    timer seconds(0, 1 s)  // Timer used to display seconds.
    timer end_calibration(calibration_time)
    state count: int = 0
    state black: int = 800
    state white: int = 200
    
  
    reaction(startup) -> disp.line0, disp.line1, disp.line2 {=
      lf_set(disp.line0, "CALIBRATING");
      lf_set(disp.line1, "Roll robot over");
      lf_set(disp.line2, "light and dark.");
    =}
  
    reaction(seconds) -> disp.line3 {=
      static char buf[17];
      snprintf(buf, 17, "time:%8d s", self->count++);
      lf_set(disp.line3, buf);
    =}
  
    reaction(end_calibration) -> line.calibrate {=
      lf_set(line.calibrate, false);
    =}
  
    reaction(t) -> line.trigger {=
      lf_set(line.trigger, true);
    =}
  
    reaction(line.reflect) -> disp.line0, disp.line1, disp.line2 {=
      static char buf0[17];
      static char buf1[17];
      static char buf2[17];

      if(line.reflect->value[0] >= self->black || line.reflect->value[1] >= self->black)
      {
        snprintf(buf0, 17, "Left");
      }
      else{
        snprintf(buf0, 17, " ");
      }
      if(line.reflect->value[3] >= self->black || line.reflect->value[4] >= self->black)
      {
        snprintf(buf1, 17, "Right");
      }
      else{
        snprintf(buf1, 17, " ");
      }
      if(line.reflect->value[1] >= self->black || line.reflect->value[2] >= self->black || line.reflect->value[3] >= self->black)
      {
        snprintf(buf2, 17, "Center");
      }
      else{
        snprintf(buf2, 17, " ");
      }

    //   snprintf(buf0, 17, "Left");
    //   snprintf(buf1, 17, "Right");
    //   snprintf(buf2, 17, "Center");
      lf_set(disp.line0, buf0);
      lf_set(disp.line1, buf1);
      lf_set(disp.line2, buf2);
    =}
  }
  